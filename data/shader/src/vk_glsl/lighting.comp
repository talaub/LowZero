#version 450

struct PointLightInfo
{
  vec3 position;
  vec3 color;
};

struct DirectionalLightInfo
{
  vec3 direction;
  vec3 color;
};

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, set = 1) uniform FrameInfoWrapper
{
  vec2 u_InverseDimensions;
  vec3 u_CameraPosition;
  mat4 u_ProjectionMatrix;
  mat4 u_ViewMatrix;
};

layout(binding = 1, set = 1) uniform DirectionalLightInfoWrapper
{
  mat4 u_DirectionalLightSpace;
  vec4 u_DirectionalLightAtlasBounds;
};

layout(binding = 0, set = 2, rgba32f) uniform image2D out_image;
layout(binding = 1, set = 2) uniform sampler2D GBufferAlbedo;
layout(binding = 2, set = 2) uniform sampler2D GBufferSurfaceNormals;
layout(binding = 3, set = 2) uniform sampler2D GBufferNormals;
layout(binding = 4, set = 2) uniform sampler2D GBufferRoughness;
layout(binding = 5, set = 2) uniform sampler2D GBufferMetalness;
layout(binding = 6, set = 2) uniform sampler2D GBufferDepth;
layout(binding = 7, set = 2) uniform sampler2D ShadowAtlas;

vec2 get_texture_coords()
{
  ivec2 l_AbsolutePixel = ivec2(gl_GlobalInvocationID.xy);
  return vec2((float(l_AbsolutePixel.x) + 0.5) * u_InverseDimensions.x,
              (float(l_AbsolutePixel.y) + 0.5) * u_InverseDimensions.y);
}

const float PI = 3.14159265359;

float ShadowCalculation(vec4 fragPosLightSpace, vec3 normal, vec3 lightDir)
{
  // perform perspective divide
  vec4 projCoords = fragPosLightSpace / fragPosLightSpace.w;
  // transform to [0,1] range
  // get closest depth value from light's perspective (using [0,1] range
  // fragPosLight as coords)
  float closestDepth = texture(ShadowAtlas, projCoords.xy).r;
  // get depth of current fragment from light's perspective
  float currentDepth = projCoords.z;
  // check whether current frag pos is in shadow

  if (closestDepth == 0.0) {
    return 0.0;
  }

  float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);

  float shadow = 0.0;
  vec2 texelSize = 1.0 / textureSize(ShadowAtlas, 0);
  for (int x = -1; x <= 1; ++x) {
    for (int y = -1; y <= 1; ++y) {
      float pcfDepth =
          texture(ShadowAtlas, projCoords.xy + vec2(x, y) * texelSize).r;
      shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;
    }
  }
  shadow /= 9.0;

  return shadow;
}

vec3 WorldPosFromDepth(float depth)
{
  float z = depth;

  vec2 TexCoord = get_texture_coords();

  vec4 clipSpacePosition = vec4(TexCoord * 2.0 - 1.0, z, 1.0);

  vec4 viewSpacePosition = inverse(u_ProjectionMatrix) * clipSpacePosition;

  // Perspective division
  viewSpacePosition /= viewSpacePosition.w;

  vec4 worldSpacePosition = inverse(u_ViewMatrix) * viewSpacePosition;

  return worldSpacePosition.xyz;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
  return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
  float a = roughness * roughness;
  float a2 = a * a;
  float NdotH = max(dot(N, H), 0.0);
  float NdotH2 = NdotH * NdotH;

  float num = a2;
  float denom = (NdotH2 * (a2 - 1.0) + 1.0);
  denom = PI * denom * denom;

  return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
  float r = (roughness + 1.0);
  float k = (r * r) / 8.0;

  float num = NdotV;
  float denom = NdotV * (1.0 - k) + k;

  return num / denom;
}
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
  float NdotV = max(dot(N, V), 0.0);
  float NdotL = max(dot(N, L), 0.0);
  float ggx2 = GeometrySchlickGGX(NdotV, roughness);
  float ggx1 = GeometrySchlickGGX(NdotL, roughness);

  return ggx1 * ggx2;
}

vec3 calculate_light(vec3 L, float dist, vec3 color, float p_Roughness,
                     float p_Metallic, vec3 p_Albedo, vec3 N, vec3 V, vec3 F0)
{
  vec3 H = normalize(V + L);
  float attenuation = 1.0 / (dist * dist);
  vec3 radiance = color * attenuation;

  // cook-torrance brdf
  float NDF = DistributionGGX(N, H, p_Roughness);
  float G = GeometrySmith(N, V, L, p_Roughness);
  vec3 F = fresnelSchlick(clamp(dot(H, V), 0.0, 1.0), F0);

  vec3 numerator = NDF * G * F;
  float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;
  vec3 specular = numerator / denominator;

  vec3 kS = F;
  vec3 kD = vec3(1.0) - kS;
  kD *= 1.0 - p_Metallic;

  // add to outgoing radiance Lo
  float NdotL = max(dot(N, L), 0.0);
  return (kD * p_Albedo / PI + specular) * radiance * NdotL;
}

void main()
{
  float l_LightStrength = 2;
  int u_PointLightCount = 1;
  PointLightInfo u_PointLight;
  u_PointLight.position = vec3(-2.0, 0.0, -6.0);
  u_PointLight.color = vec3(1, 1, 1) * l_LightStrength;
  DirectionalLightInfo u_DirectionalLight;
  u_DirectionalLight.direction = vec3(2.0, -2.5, -0.5);
  u_DirectionalLight.color = vec3(1, 1, 1) * l_LightStrength;

  const mat4 bias = mat4(0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 1.0,
                         0.0, 0.5, 0.5, 0.0, 1.0);

  ivec2 l_AbsolutePixel = ivec2(gl_GlobalInvocationID.xy);
  vec2 l_TextureCoordinates = get_texture_coords();

  float l_Depth = texture(GBufferDepth, l_TextureCoordinates).x;

  if (l_Depth >= 1.0) {
    imageStore(out_image, l_AbsolutePixel, vec4(0, 0, 0, 0));
    return;
  }

  vec4 l_Albedo = texture(GBufferAlbedo, l_TextureCoordinates);

  vec3 l_WorldPosition = WorldPosFromDepth(l_Depth);
  vec4 l_PositionLightSpace =
      bias * u_DirectionalLightSpace * vec4(l_WorldPosition, 1.0);

  vec3 l_Normal = texture(GBufferNormals, l_TextureCoordinates).xyz;
  l_Normal = normalize(vec3((l_Normal.x * 2.0) - 1.0, (l_Normal.y * 2.0) - 1.0,
                            (l_Normal.z * 2.0) - 1.0));

  float l_Roughness = texture(GBufferRoughness, l_TextureCoordinates).x;
  float l_Metallic = texture(GBufferMetalness, l_TextureCoordinates).x;
  float l_Ao = 0.1; // TODO: Temp

  vec3 N = normalize(l_Normal);
  vec3 V = normalize(u_CameraPosition - l_WorldPosition);

  vec3 F0 = vec3(0.04);
  F0 = mix(F0, l_Albedo.xyz, l_Metallic);

  // reflectance equation
  vec3 Lo = vec3(0.0);
  for (int i = 0; i < u_PointLightCount; ++i) {
    PointLightInfo i_PointLight = u_PointLight;

    // calculate per-light radiance
    vec3 L = normalize(i_PointLight.position - l_WorldPosition);
    float dist = length(i_PointLight.position - l_WorldPosition);
    Lo += calculate_light(L, dist, i_PointLight.color, l_Roughness, l_Metallic,
                          l_Albedo.xyz, N, V, F0);
  }

  {
    vec3 L = normalize(u_DirectionalLight.direction * -1.0);
    float dis = 1.0;

    Lo += calculate_light(L, dis, u_DirectionalLight.color, l_Roughness,
                          l_Metallic, l_Albedo.xyz, N, V, F0);
  }

  float l_ShadowValue = ShadowCalculation(l_PositionLightSpace, N,
                                          u_DirectionalLight.direction * -1.0);

  vec3 ambient = vec3(0.03) * l_Albedo.xyz * l_Ao;
  vec3 color = ambient + (1.0 - l_ShadowValue) * Lo;

  vec4 l_OutColor = vec4(color, 1.0);

  // l_OutColor = vec4(Lo, 1.0);
  //  l_OutColor = vec4(vec3(l_ShadowValue), 1.0);
  /*
  {
    vec3 projCoords = l_PositionLightSpace.xyz / l_PositionLightSpace.w;
    l_OutColor = vec4(projCoords.x, projCoords.y, projCoords.z, 1.0);
  }
  */

  imageStore(out_image, l_AbsolutePixel, l_OutColor);
}
